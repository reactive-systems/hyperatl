/* PLParserCC.java */
/* Generated By:JavaCC: Do not edit this line. PLParserCC.java */
package hyperatl.pl.parser.generated;

import java.io.*;
import hyperatl.pl.*;
import java.util.*;

/**
 * The generated parser.
 */
public class PLParserCC implements PLParserCCConstants {
        private static PLParserCC theParser = null;

        private static void initializeParser(InputStream str)
        {
                if (theParser == null) {
                        theParser = new PLParserCC(str);
                } else {
                        ReInit(str);
                }
        }

        public static Program parsePL(InputStream str) throws ParseException
        {
                initializeParser(str);
                return Program();
        }

  static final public Map<String, Integer> Header() throws ParseException {Map<String, Integer> m = new HashMap<>();
        String var = null;
        Integer d = null;
    jj_consume_token(DOMAIN);
    label_1:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
      var = Identifier();
      d = Integer();
m.put(var, d);
    }
{if ("" != null) return m;}
    throw new Error("Missing return statement in function");
}

  static final public Program Program() throws ParseException {Map<String, Integer> m = new HashMap<>();
        Statement statement = null;
    m = Header();
    jj_consume_token(BEGIN);
    statement = PStatement();
    jj_consume_token(END);
{if ("" != null) return new Program(statement, m);}
    throw new Error("Missing return statement in function");
}

  static final public Statement PStatement() throws ParseException {Statement left, right = null;
    if (jj_2_2(2)) {
      left = While();
    } else if (jj_2_3(2)) {
      left = If();
    } else if (jj_2_4(2)) {
      left = IfN();
    } else if (jj_2_5(2)) {
      left = Read();
    } else if (jj_2_6(2)) {
      left = Out();
    } else if (jj_2_7(2)) {
      left = Assign();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_8(2)) {
      jj_consume_token(SEQ);
      right = PStatement();
left = new StatementSeq(left, right);
    } else {
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public Statement While() throws ParseException {Expression expr = null;
        Statement body = null;
    jj_consume_token(WHILE);
    jj_consume_token(LPARENTH);
    expr = Expr();
    jj_consume_token(RPARENTH);
    jj_consume_token(LCURLY);
    body = PStatement();
    jj_consume_token(RCURLY);
{if ("" != null) return new StatementWhile(expr, body);}
    throw new Error("Missing return statement in function");
}

  static final public Statement If() throws ParseException {Expression expr = null;
        Statement left = null;
        Statement right = null;
    jj_consume_token(IF);
    jj_consume_token(LPARENTH);
    expr = Expr();
    jj_consume_token(RPARENTH);
    jj_consume_token(THEN);
    jj_consume_token(LCURLY);
    left = PStatement();
    jj_consume_token(RCURLY);
    jj_consume_token(ELSE);
    jj_consume_token(LCURLY);
    right = PStatement();
    jj_consume_token(RCURLY);
{if ("" != null) return new StatementIf(expr, left, right);}
    throw new Error("Missing return statement in function");
}

  static final public Statement IfN() throws ParseException {Statement left = null;
        Statement right = null;
    jj_consume_token(NDET);
    jj_consume_token(THEN);
    jj_consume_token(LCURLY);
    left = PStatement();
    jj_consume_token(RCURLY);
    jj_consume_token(ELSE);
    jj_consume_token(LCURLY);
    right = PStatement();
    jj_consume_token(RCURLY);
{if ("" != null) return new StatementIfN(left, right);}
    throw new Error("Missing return statement in function");
}

  static final public Statement Read() throws ParseException {String var = null;
        Integer cId = null;
    var = Identifier();
    jj_consume_token(READSYM);
    if (jj_2_9(2)) {
      jj_consume_token(READH);
      jj_consume_token(LPARENTH);
      cId = Integer();
      jj_consume_token(RPARENTH);
{if ("" != null) return new StatementRead(var, cId, true);}
    } else if (jj_2_10(2)) {
      jj_consume_token(READL);
      jj_consume_token(LPARENTH);
      cId = Integer();
      jj_consume_token(RPARENTH);
{if ("" != null) return new StatementRead(var, cId, false);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  static final public Statement Out() throws ParseException {Expression expr = null;
        Integer cId = null;
    jj_consume_token(OUT);
    jj_consume_token(LPARENTH);
    expr = Expr();
    jj_consume_token(COMMA);
    cId = Integer();
    jj_consume_token(RPARENTH);
{if ("" != null) return new StatementOut(expr, cId);}
    throw new Error("Missing return statement in function");
}

  static final public Statement Assign() throws ParseException {String var = null;
        Expression expr = null;
    var = Identifier();
    jj_consume_token(ASSIGN);
    expr = Expr();
{if ("" != null) return new StatementAssign(var, expr);}
    throw new Error("Missing return statement in function");
}

  static final public Expression Expr() throws ParseException {Expression expr;
    expr = ExprOr();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ExprOr() throws ParseException {Expression left, right;
    left = ExprAnd();
    label_2:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(OR);
      right = ExprAnd();
left = left.or(right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ExprAnd() throws ParseException {Expression left, right;
    left = ExprConcat();
    label_3:
    while (true) {
      if (jj_2_12(2)) {
        ;
      } else {
        break label_3;
      }
      jj_consume_token(AND);
      right = ExprConcat();
left = left.and(right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ExprConcat() throws ParseException {Expression left, right;
    left = ExprProj();
    label_4:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_4;
      }
      jj_consume_token(CONCAT);
      right = ExprProj();
left = left.concat(right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ExprProj() throws ParseException {Expression left;
        Integer index = null;
    left = ExprAtom();
    if (jj_2_14(2)) {
      jj_consume_token(LBRACKET);
      index = Integer();
      jj_consume_token(RBRACKET);
left = left.proj(index);
    } else {
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
}

  static final public Expression ExprAtom() throws ParseException {Expression expression = null;
        String var;
    if (jj_2_15(2)) {
      jj_consume_token(LPARENTH);
      expression = Expr();
      jj_consume_token(RPARENTH);
    } else if (jj_2_16(2)) {
      jj_consume_token(TRUE);
expression = new Expression(true);
    } else if (jj_2_17(2)) {
      jj_consume_token(FALSE);
expression = new Expression(false);
    } else if (jj_2_18(2)) {
      jj_consume_token(NOT);
      expression = ExprAtom();
expression = expression.not();
    } else if (jj_2_19(2)) {
      var = Identifier();
expression = new Expression(var);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expression;}
    throw new Error("Missing return statement in function");
}

  static final public String Identifier() throws ParseException {
    jj_consume_token(REG_IDENT);
{if ("" != null) return getToken(0).image;}
    throw new Error("Missing return statement in function");
}

  static final public int Integer() throws ParseException {
    jj_consume_token(REG_INT);
{if ("" != null) return Integer.parseInt(getToken(0).image);}
    throw new Error("Missing return statement in function");
}

  static final public String QuotedString() throws ParseException {String s;
    jj_consume_token(REG_STRING);
s = getToken(0).image;
                // remove outer quotes "
                s = s.substring(1, s.length()-1);
                {if ("" != null) return s;}
    throw new Error("Missing return statement in function");
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_If_167_9_8()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_While_148_9_7()) return true;
    return false;
  }

  static private boolean jj_3R_Expr_269_9_17()
 {
    if (jj_3R_ExprOr_278_9_19()) return true;
    return false;
  }

  static private boolean jj_3_10()
 {
    if (jj_scan_token(READL)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExprProj_315_9_16()
 {
    if (jj_3R_ExprAtom_333_9_18()) return true;
    return false;
  }

  static private boolean jj_3R_PStatement_121_9_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_If_167_9_8()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_Integer_354_9_6()
 {
    if (jj_scan_token(REG_INT)) return true;
    return false;
  }

  static private boolean jj_3_9()
 {
    if (jj_scan_token(READH)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_Read_210_9_10()
 {
    if (jj_3R_Identifier_347_9_5()) return true;
    if (jj_scan_token(READSYM)) return true;
    return false;
  }

  static private boolean jj_3_13()
 {
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_ExprProj_315_9_16()) return true;
    return false;
  }

  static private boolean jj_3R_Assign_256_9_12()
 {
    if (jj_3R_Identifier_347_9_5()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_ExprConcat_302_9_15()
 {
    if (jj_3R_ExprProj_315_9_16()) return true;
    return false;
  }

  static private boolean jj_3R_Identifier_347_9_5()
 {
    if (jj_scan_token(REG_IDENT)) return true;
    return false;
  }

  static private boolean jj_3_19()
 {
    if (jj_3R_Identifier_347_9_5()) return true;
    return false;
  }

  static private boolean jj_3_18()
 {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_ExprAtom_333_9_18()) return true;
    return false;
  }

  static private boolean jj_3_12()
 {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_ExprConcat_302_9_15()) return true;
    return false;
  }

  static private boolean jj_3_17()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_16()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_ExprAnd_290_9_14()
 {
    if (jj_3R_ExprConcat_302_9_15()) return true;
    return false;
  }

  static private boolean jj_3_15()
 {
    if (jj_scan_token(LPARENTH)) return true;
    if (jj_3R_Expr_269_9_17()) return true;
    return false;
  }

  static private boolean jj_3R_While_148_9_7()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3R_ExprAtom_333_9_18()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_Out_239_9_11()
 {
    if (jj_scan_token(OUT)) return true;
    if (jj_scan_token(LPARENTH)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_Identifier_347_9_5()) return true;
    if (jj_3R_Integer_354_9_6()) return true;
    return false;
  }

  static private boolean jj_3R_IfN_190_9_9()
 {
    if (jj_scan_token(NDET)) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  static private boolean jj_3_11()
 {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_ExprAnd_290_9_14()) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_scan_token(SEQ)) return true;
    if (jj_3R_PStatement_121_9_13()) return true;
    return false;
  }

  static private boolean jj_3R_ExprOr_278_9_19()
 {
    if (jj_3R_ExprAnd_290_9_14()) return true;
    return false;
  }

  static private boolean jj_3_14()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Integer_354_9_6()) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_Assign_256_9_12()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_Out_239_9_11()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_Read_210_9_10()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    if (jj_3R_IfN_190_9_9()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PLParserCCTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[19];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PLParserCC(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PLParserCC(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new PLParserCCTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PLParserCC(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new PLParserCCTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new PLParserCCTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PLParserCC(PLParserCCTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PLParserCCTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[35];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 35; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 19; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
