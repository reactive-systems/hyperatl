/* Generated By:JavaCC: Do not edit this line. PLParserCCConstants.java */
package hyperatl.pl.parser.generated;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface PLParserCCConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WHITESPACE = 1;
  /** RegularExpression Id. */
  int DOMAIN = 2;
  /** RegularExpression Id. */
  int BEGIN = 3;
  /** RegularExpression Id. */
  int END = 4;
  /** RegularExpression Id. */
  int IF = 5;
  /** RegularExpression Id. */
  int THEN = 6;
  /** RegularExpression Id. */
  int ELSE = 7;
  /** RegularExpression Id. */
  int WHILE = 8;
  /** RegularExpression Id. */
  int READH = 9;
  /** RegularExpression Id. */
  int READL = 10;
  /** RegularExpression Id. */
  int OUT = 11;
  /** RegularExpression Id. */
  int SEQ = 12;
  /** RegularExpression Id. */
  int COMMA = 13;
  /** RegularExpression Id. */
  int CONCAT = 14;
  /** RegularExpression Id. */
  int NDET = 15;
  /** RegularExpression Id. */
  int ASSIGN = 16;
  /** RegularExpression Id. */
  int READSYM = 17;
  /** RegularExpression Id. */
  int NOT = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int LPARENTH = 21;
  /** RegularExpression Id. */
  int RPARENTH = 22;
  /** RegularExpression Id. */
  int LBRACKET = 23;
  /** RegularExpression Id. */
  int RBRACKET = 24;
  /** RegularExpression Id. */
  int LCURLY = 25;
  /** RegularExpression Id. */
  int RCURLY = 26;
  /** RegularExpression Id. */
  int TRUE = 27;
  /** RegularExpression Id. */
  int FALSE = 28;
  /** RegularExpression Id. */
  int REG_INT = 29;
  /** RegularExpression Id. */
  int REG_STRING = 30;
  /** RegularExpression Id. */
  int REG_IDENT = 31;
  /** RegularExpression Id. */
  int REG_HEADERNAME = 32;
  /** RegularExpression Id. */
  int REG_ANAME = 33;
  /** RegularExpression Id. */
  int LEXICAL_ERROR = 34;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WHITESPACE>",
    "\"==DOMAIN==\"",
    "\"==BEGIN==\"",
    "\"==END==\"",
    "\"IF\"",
    "\"THEN\"",
    "\"ELSE\"",
    "\"WHILE\"",
    "\"READH\"",
    "\"READL\"",
    "\"OUT\"",
    "\";\"",
    "\",\"",
    "\"@\"",
    "\"IF*\"",
    "\":=\"",
    "\"<-\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"TRUE\"",
    "\"FALSE\"",
    "<REG_INT>",
    "<REG_STRING>",
    "<REG_IDENT>",
    "<REG_HEADERNAME>",
    "<REG_ANAME>",
    "<LEXICAL_ERROR>",
  };

}
